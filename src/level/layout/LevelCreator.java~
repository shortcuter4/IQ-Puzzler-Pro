package layout;

/*
 * GridLayoutDemo.java
 *
 */

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class GridLayoutDemo extends JFrame {
    static final String gapList[] = {"0", "10", "15", "20"};
    final static int maxGap = 20;
    JComboBox horGapComboBox;
    JComboBox verGapComboBox;
    JButton doneButton = new JButton("Done");
    
    Color[] colors = new Color[12];
   
    GridLayout experimentLayout = new GridLayout(5,11);
    
    JButton[] buttons = new JButton[55];
    int[] arr = {1,1,1,2,2,2,3,4,4,4,4,5,5,1,1,6,2,3,3,4,7,7,5,5,6,6,6,2,8,8,9,9,7,10,5,10,6,11,11,12,8,8,9,7,10,10,10,11,11,12,12,12,8,9,7};
    
    
    public GridLayoutDemo(String name) {
        super(name);
        setResizable(true);
    }
    
    public void initGaps() {
        horGapComboBox = new JComboBox(gapList);
        verGapComboBox = new JComboBox(gapList);
    }
    
    public void addComponentsToPane(final Container pane) {
        initGaps();
        final JPanel compsToExperiment = new JPanel();
        compsToExperiment.setLayout(experimentLayout);
        JPanel controls = new JPanel();
        controls.setLayout(new GridLayout(2,3));
        
        //Set up components preferred size
        JButton b = new JButton("Just fake button");
        Dimension buttonSize = b.getPreferredSize();
        compsToExperiment.setPreferredSize(new Dimension((int)(buttonSize.getWidth() * 2.5)+maxGap,
                (int)(buttonSize.getHeight() * 3.5)+maxGap * 2));
      
        setButtonColors(arr);
        for(int i = 0; i < 55; i++)
          buttons[i].addActionListener(listen);
        
         doneButton.addActionListener(listenDone);
        
        for(int i = 0 ; i < 55; i++)
          buttons[i].setEnabled(true);
        
         for(int i = 0; i  < 55; i++){
                compsToExperiment.add(buttons[i]);
              }
        //Add controls to set up horizontal and vertical gaps
 
        controls.add(doneButton);
        
        //Process the Apply gaps button press
      //  applyButton.addActionListener(new ActionListener(){
          //  public void actionPerformed(ActionEvent e){
                //Get the horizontal gap value
                String horGap = (String)horGapComboBox.getSelectedItem();
                //Get the vertical gap value
                String verGap = (String)verGapComboBox.getSelectedItem();
                //Set up the horizontal gap value
                experimentLayout.setHgap(5);
                //Set up the vertical gap value
                experimentLayout.setVgap(5);
                //Set up the layout of the buttons
                experimentLayout.layoutContainer(compsToExperiment);
           // }
       // });
        pane.add(compsToExperiment, BorderLayout.NORTH);
        pane.add(new JSeparator(), BorderLayout.CENTER);
        pane.add(controls, BorderLayout.SOUTH);
    }
    
        ActionListener listen = new ActionListener() 
    {
            public void actionPerformed(ActionEvent e) {
          
            JButton btn = (JButton) e.getSource();
            
            int indexOfColor = Integer.parseInt(btn.getText());
            Color currentBackground = btn.getBackground();
            
            if(colors[indexOfColor-1] == currentBackground)
            {
               for(int i = 0 ; i < 55; i ++)
               {
                 if(buttons[i].getText().equals(btn.getText()))
                   buttons[i].setBackground(Color.gray);
               }
            }
            else
            { 
               for(int i = 0 ; i < 55; i ++)
               {
                 if(buttons[i].getText().equals(btn.getText()))
                   buttons[i].setBackground(colors[indexOfColor-1]);
               }
            }

            }
        
    };
       

         ActionListener listenDone = new ActionListener() 
    {
        @Override
        public void actionPerformed(ActionEvent e) {
          
          boolean exist = false;
          
        
          boolean[] indexes = new boolean[12];

          for(int i = 0 ; i < 55; i++)
          {
             if(buttons[i].getBackground() == Color.gray) 
             {
                  if(indexes[Integer.parseInt(buttons[i].getText()) -1] == false)
                  {
                     indexes[Integer.parseInt(buttons[i].getText()) -1] = true;
                  }
               }
               
           
          }
          
          
          for(int i = 0 ; i < 12; i++)
          {
            System.out.println(indexes[i]);
          }
 
         }};
         
        
    public void setButtonColors(int [] integers) 
   {
      
      colors[0] = Color.black;
      colors[1] = Color.red;
      colors[2] = Color.LIGHT_GRAY;
      colors[3] = Color.blue;
      colors[4] = Color.yellow;
      colors[5] = Color.green;
      colors[6] = Color.pink;
      colors[7] = Color.cyan;
      colors[8] = Color.orange;
      colors[9] = Color.magenta;
      colors[10] = Color.white;
      colors[11] = Color.DARK_GRAY;
      
      int colorIndex = 0;
      
      for(int i = 0; i < 55; i++)
        buttons[i] = new JButton(String.valueOf(integers[i])); 

      for(int i = 0; i < 55; i++)
      {
        for(int j = i; j < 55; j++)
        {
          if((buttons[i].getText() == buttons[j].getText()) && (buttons[j].isEnabled()))
          {
        
            buttons[j].setBackground(colors[integers[colorIndex]-1]);
            buttons[j].setEnabled(false);
            colorIndex++;
          } 
      } 

      }
      
   }
    
    /**
     * Create the GUI and show it.  For thread safety,
     * this method is invoked from the
     * event dispatch thread.
     */
    private static void createAndShowGUI() {
        //Create and set up the window.
        GridLayoutDemo frame = new GridLayoutDemo("GridLayoutDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //Set up the content pane.
        frame.addComponentsToPane(frame.getContentPane());
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }
    
    public static void main(String[] args) {
        /* Use an appropriate Look and Feel */
        try {
            //UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        /* Turn off metal's use of bold fonts */
        UIManager.put("swing.boldMetal", Boolean.FALSE);
        
        //Schedule a job for the event dispatch thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }
}